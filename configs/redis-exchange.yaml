kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: redis-exchange
  namespace: dev
  labels:
    app.kubernetes.io/part-of: exchange
    template: redis-persistent-template
spec:
  strategy:
    type: Recreate
    recreateParams:
      timeoutSeconds: 600
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - redis
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: 'redis:5-el8'
    - type: ConfigChange
  replicas: 1
  selector:
    name: redis-exchange
  template:
    metadata:
      labels:
        name: redis-exchange
    spec:
      containers:
        - resources:
            limits:
              memory: 512Mi
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-i'
                - '-c'
                - >-
                  test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" ==
                  "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: redis
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-exchange
                  key: database-password
          securityContext:
            capabilities: {}
            privileged: false
          ports:
            - containerPort: 6379
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          image: >-
            image-registry.openshift-image-registry.svc:5000/openshift/redis
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
